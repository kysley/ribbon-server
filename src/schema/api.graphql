### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  confirmed: Boolean!
  createdAt: DateTime!
  discriminator: String!
  email: String!
  exp: Int!
  history(after: ResultWhereUniqueInput, before: ResultWhereUniqueInput, first: Int, last: Int): [Result!]!
  id: String!
  lastSeen: DateTime!
  level: Int!
  role: Role!
  updatedAt: DateTime!
  username: String!
}

input AccountHistoryOrderByInput {
  createdAt: SortOrder
  mode: SortOrder
  wpm: SortOrder
}

type AuthPayload {
  account: Account
  token: String
}

scalar DateTime

input MapWhereUniqueInput {
  id: String
}

type Mutation {
  RegisterWithDiscord(access: String!, type: String!): AuthPayload
  wordset(length: Int!, punctuate: Boolean = false, seed: String): WordsetPayload
}

type Query {
  me: Account
}

type Result {
  account: Account!
  correct: Int!
  corrections: Int!
  cpm: Int!
  createdAt: DateTime!
  id: String!
  incorrect: Int!
  rawCpm: Int!
  wordIndex: Int!
  wpm: Int!
}

input ResultInput {
  correct: Int
  corrections: Int
  cpm: Int
  history: Int
  incorrect: Int
  letterIndex: Int
  punctuated: Boolean
  rawCpm: Int
  rawWpm: Int
  seed: String
  state: String
  wordIndex: Int
  wpm: Int
}

input ResultWhereUniqueInput {
  id: String
}

enum Role {
  ADMIN
  BETA
  PRO
  USER
}

enum SortOrder {
  asc
  desc
}

type WordsetPayload {
  seed: String
  wordset: String
}
