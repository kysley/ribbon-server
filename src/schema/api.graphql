### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  confirmed: Boolean!
  createdAt: DateTime!
  discriminator: String!
  email: String!
  exp: Int!
  history(after: ResultWhereUniqueInput, before: ResultWhereUniqueInput, first: Int, last: Int): [Result!]!
  id: String!
  lastSeen: DateTime!
  level: Int!
  role: Role!
  updatedAt: DateTime!
  username: String!
}

input AccountHistoryOrderByInput {
  createdAt: SortOrder
  mode: SortOrder
  wpm: SortOrder
}

type AuthPayload {
  account: Account
  token: String
}

input CreateResultInput {
  acc: Int!
  characters: String!
  cpm: Int!
  mode: Mode!
  raw: Int!
  seed: String!
  wpm: Int!
}

scalar DateTime

enum Mode {
  TIME
  WORDS
}

type Mutation {
  CreateResult(input: CreateResultInput!): Result
  RegisterWithDiscord(access: String!, type: String!): AuthPayload
  Wordset(length: Int!, punctuate: Boolean = false, seed: String): WordsetPayload
}

type Query {
  Me: Account
  User(id: ID!): Account
}

type Result {
  acc: Int!
  account: Account!
  characters: String!
  cpm: Int!
  createdAt: DateTime!
  id: String!
  mode: Mode!
  raw: Int!
  seed: String!
  wpm: Int!
}

input ResultWhereUniqueInput {
  id: String
}

enum Role {
  ADMIN
  BETA
  PRO
  USER
}

enum SortOrder {
  asc
  desc
}

type WordsetPayload {
  seed: String
  wordset: String
}
